/* autogenerated by Processing revision 1294 on 2025-01-12 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class sketch_________ extends PApplet {

String userInput = ""; // ユーザーが入力した文字列を格納する
boolean isActivated = false; // プログラムの状態を管理する
PFont myFont;
int startTime;  // 時間を計測するための変数
int state = 0; // 初期状態

public void setup() {
  /* size commented out by preprocessor */;
  background(255);
  textSize(20);
  myFont = createFont("Makinas-4-Flat", 25);
  textFont(myFont);
}

public void draw() {
  if (isActivated) {
    // 正解時の処理
    // 経過時間を計算して3秒後に次の状態へ
    if (millis() - startTime >= 3000 && state == 0) {
      isActivated = false; // 正解モードを終了
      state = 1;           // 次の状態に遷移
      startTime = 0;       // タイマーをリセット
    }else if (millis() - startTime >= 3000 && state == 1) {
      isActivated = false; // 正解モードを終了
      state = 2;           // 次の状態に遷移
      startTime = 0;       // タイマーをリセット
    }else if (millis() - startTime >= 3000 && state == 2) {
      isActivated = false; // 正解モードを終了
      state = 3;           // 次の状態に遷移
      startTime = 0;       // タイマーをリセット
    }else if (millis() - startTime >= 3000 && state == 3) {
      isActivated = false; // 正解モードを終了
      state = 4;           // 次の状態に遷移
      startTime = 0;       // タイマーをリセット
    }else if (millis() - startTime >= 3000 && state == 4) {
      isActivated = false; // 正解モードを終了
      state = 5;           // 次の状態に遷移
      startTime = 0;       // タイマーをリセット
    }else if (millis() - startTime >= 3000 && state == 5) {
      isActivated = false; // 正解モードを終了
      state = 6;           // 次の状態に遷移
      startTime = 0;       // タイマーをリセット
    }else if (millis() - startTime >= 3000 && state == 6) {
      isActivated = false; // 正解モードを終了
      state = 7;           // 次の状態に遷移
      startTime = 0;       // タイマーをリセット
    }else if (millis() - startTime >= 3000 && state == 7) {
      isActivated = false; // 正解モードを終了
      state = 8;           // 次の状態に遷移
      startTime = 0;       // タイマーをリセット
    }else if (millis() - startTime >= 3000 && state == 8) {
      isActivated = false; // 正解モードを終了
      state = 9;           // 次の状態に遷移
      startTime = 0;       // タイマーをリセット
    }else if (millis() - startTime >= 3000 && state == 9) {
      isActivated = false; // 正解モードを終了
      state = 10;           // 次の状態に遷移
      startTime = 0;       // タイマーをリセット
    }else if (millis() - startTime >= 3000 && state == 10) {
      isActivated = false; // 正解モードを終了
      state = 11;           // 次の状態に遷移
      startTime = 0;       // タイマーをリセット
    }
  } else {
    // 通常時の処理
    background(255);
    fill(0);
    if (state == 0) {
      text("名前は？", 50,height / 2 - 20);
    } else if (state == 1) {
      text("誕生日は？(例：1/1)", 50, height / 2 - 20);
    }else if (state == 2) {
      text("妹の名前は？", 50, height / 2 - 20);
    }else if (state == 3) {
      text("身長は？", 50, height / 2 - 20);
    }else if (state == 4) {
      text("姉の名前は？", 50, height / 2 - 20);
    }else if (state == 5) {
      text("義理の兄の名前は？", 50, height / 2 - 20);
    }else if (state == 6) {
      text("嫌いな人の名前は？", 50, height / 2 - 20);
    }else if (state == 7) {
      text("誰に連れられて演劇部に", 50, height / 2 - 20);
      text("来た？", width - 100, height / 2 + 10);
    }else if (state == 8) {
      text("出身地は？", 50, height / 2 - 20);
    }else if (state == 9) {
      text("勇・小雪とは", 50, height / 2 - 20);
      text("小学何年生からの付き合い？", 80, height / 2 + 10);
    }else if (state == 10) {
      text("好きな料理は？",50, height / 2 - 20);
    }
    text(userInput, 50, height / 2 + 20);
  }
}


public void keyPressed() {
  if (key == BACKSPACE) {
    // バックスペースが押された場合、文字を削除
    if (userInput.length() > 0) {
      userInput = userInput.substring(0, userInput.length() - 1);
    }
  } else if (key == ENTER || key == RETURN) {
    // Enterキーが押された場合、コマンドを確認
    if (normalizeInput(userInput).equals(normalizeInput("kigarashi hyouri")) && state == 0){
      isActivated = true;
    }else if (normalizeInput(userInput).equals(normalizeInput("wakaranai"))){
      isActivated = true;
    }else if (normalizeInput(userInput).equals(normalizeInput("11/20")) && state == 1){
      isActivated = true;
    }else if (normalizeInput(userInput).equals(normalizeInput("kigarashi touka")) && state == 2){
      isActivated = true;
    }else if (normalizeInput(userInput).equals(normalizeInput("187")) && state == 3){
      isActivated = true;
    }else if (normalizeInput(userInput).equals(normalizeInput("kigarashi toa")) && state == 4){
      isActivated = true;
    }else if (normalizeInput(userInput).equals(normalizeInput("esume")) && state == 5){
      isActivated = true;
    }else if (normalizeInput(userInput).equals(normalizeInput("yanagi ryou")) && state == 6){
      isActivated = true;
    }else if (normalizeInput(userInput).equals(normalizeInput("shinonome koyuki")) && state == 7){
      isActivated = true;
    }else if (normalizeInput(userInput).equals(normalizeInput("oosaka")) && state == 8){
      isActivated = true;
    }else if (normalizeInput(userInput).equals(normalizeInput("1")) && state == 9){
      isActivated = true;
    }else if (normalizeInput(userInput).equals(normalizeInput("mirufi-yunabe")) && state == 10){
      isActivated = true;
    }
     userInput = ""; // 入力をリセット
  } else if (key != CODED) {
    // 他のキーが押された場合、文字を追加
    userInput += key;
  }
}

private static String normalizeInput(String input) {
    return input
        .toLowerCase() // 小文字に変換
        .trim()
        .replace("si", "shi")
        .replace("toka", "touka") 
        .replace("hyori", "hyouri")
        .replace("ousaka", "oosaka")
        .replace("yanagi ryo", "yanagi ryou")
        .replace("huli", "fi")
        .replace("187cm", "187")
        .replace("esume fon kuruto", "esume");
}


  public void settings() { size(400, 400); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "sketch_________" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
